{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>The <code>freeact-skills</code> project provides a curated set of predefined skill modules for the <code>freeact</code> agent system. These modules must be pre-installed on <code>ipybox</code> to be accessible by <code>freeact</code> agents.</p> <p></p>"},{"location":"#skills","title":"Skills","text":"<p>Currently in its early development phase, <code>freeact-skills</code> offers a set of core skills and specialized skills. To use a skill in a <code>freeact</code> agent application, reference it by its module name (see <code>freeact</code> tutorials for details). For example, the <code>zotero</code> skill can be referenced as <code>freeact_skills.zotero.api</code>.</p> <p>Skill module sources are retrieved from <code>ipybox</code> and incorporated into the agent's model context. By convention, <code>freeact-skills</code> packages are split into an <code>api</code> module containing the skill interface, including a detailed description and optional usage examples, and one or more implementation modules containing the underlying logic.</p> <p>This convention ensures that <code>freeact</code> agents only receive relevant information from the <code>api</code> module while internal implementation details remain hidden. However, it is merely a guideline; you are free to present any Python code as a skill module, depending on your context requirements and the level of detail you want the agent to process.</p>"},{"location":"#core-skills","title":"Core skills","text":"<ul> <li> <p><code>freeact_skills.search.google.stream.api</code></p> <p>Provides generative Google search via the Gemini 2 API. Search output is streamed, enabling clients to display results as they are generated.</p> </li> <li> <p><code>freeact_skills.search.google.api</code></p> <p>Provides generative Google search via the Gemini 2 API. Search output is returned as a string for direct processing by agents in code actions. Maintained for experimentation with Gemini 2 based <code>freeact</code> agents.</p> </li> </ul> <p>Both Google search skills require a <code>GOOGLE_API_KEY</code> or <code>GEMINI_API_KEY</code>, obtainable from Google AI Studio.</p> <ul> <li> <p><code>freeact_skills.search.perplexity.api</code></p> <p>Provides generative Perplexity search via the Perplexity API. Search output is streamed for real-time display and includes indexed source links in results. Requires a <code>PERPLEXITY_API_KEY</code>, obtainable from the Perplexity API Settings page.</p> </li> </ul>"},{"location":"#specialized-skills","title":"Specialized skills","text":"<ul> <li> <p><code>freeact_skills.zotero.api</code></p> <p>Provides access to a Zotero group library via the Zotero API. Requires a <code>ZOTERO_API_KEY</code> which can be obtained from the Zotero Security Settings page. A <code>ZOTERO_GROUP_ID</code> environment variable with a group library ID must also be defined. Here's what a <code>freeact</code> agent says about this skill module when asked to describe it:</p> <p>The Zotero module provides a way to interact with Zotero group libraries programmatically. Here's what it can do in simple terms:</p> <ol> <li> <p>Basic Library Access</p> <ul> <li>Connect to a Zotero group library using an API key</li> <li>Sync local data with the latest changes from Zotero</li> <li>Browse through collections (folders) and documents</li> </ul> </li> <li> <p>Document Management</p> <ul> <li>Access document details like titles, URLs, abstracts, tags, and publication dates</li> <li>View documents organized in collections and sub-collections</li> <li>Find specific documents using their unique keys</li> <li>Add web links to documents with optional titles and notes</li> </ul> </li> <li> <p>Collection Organization</p> <ul> <li>Navigate through collection hierarchies (folders within folders)</li> <li>List all documents in a collection, including those in sub-collections</li> <li>Keep track of versions for collections and documents</li> <li>Access the full library structure starting from the root collection</li> </ul> </li> <li> <p>Attachments</p> <ul> <li>Work with two types of attachments:<ul> <li>Notes: Text annotations attached to documents</li> <li>Links: Web URLs with optional titles and notes</li> </ul> </li> </ul> </li> </ol> <p>The module is primarily designed for reading and organizing academic references in a Zotero group library, with some ability to add new content (like links). It maintains a local copy of the library that can be synchronized with Zotero's servers to get the latest updates.</p> </li> <li> <p><code>freeact_skills.reader.api</code></p> <p>Provides access to Readwise Reader via the Readwise Reader API. Requires a <code>READWISE_API_KEY</code> which can be obtained from the here. Here's what a <code>freeact</code> agent says about this skill module when asked to describe it:</p> <p>The reader module provides the following capabilities:</p> <ol> <li> <p>Save documents to Readwise Reader in two ways:</p> <ul> <li>By URL: You can save any document by providing its URL using <code>save_document_url()</code>. You can optionally specify:<ul> <li>Where to save it (location: new, later, or archive)</li> <li>The type of content (category: article, pdf, tweet, or video)</li> <li>Tags to organize the document</li> <li>A note attached to the document</li> </ul> </li> <li>By HTML content: You can save HTML content directly using <code>save_document_html()</code> with similar options as above, plus requiring a title</li> </ul> </li> <li> <p>List and retrieve documents from Readwise Reader using <code>list_documents()</code>:</p> <ul> <li>Can filter documents by location (new, later, archive, or feed)</li> <li>Can get only documents updated after a specific date/time</li> <li>Returns detailed document information including:<ul> <li>Basic metadata: ID, title, author, source, summary</li> <li>URLs: Both Reader's URL and original source URL</li> <li>Categories and location</li> <li>Tags and notes</li> <li>Reading statistics (word count, reading progress)</li> <li>Various timestamps (created, updated, saved, opened)</li> <li>Additional metadata like image URL and parent document ID</li> </ul> </li> </ul> </li> <li> <p>The module provides a factory function <code>create_readwise_reader()</code> to instantiate the client:</p> <ul> <li>Takes an optional API key</li> <li>If no API key is provided, it looks for it in the READWISE_API_KEY environment variable</li> </ul> </li> </ol> <p>This module essentially allows you to programmatically save documents to Readwise Reader and retrieve information about your saved documents, enabling automation of document management and reading workflows.</p> </li> </ul>"},{"location":"#system-skills","title":"System skills","text":"<ul> <li> <p><code>freeact_skills.editor</code></p> <p>Internal system component (not for direct application use). Enables agents to view, create, edit, insert, and undo file edits, supporting interactive skill module development. Based on Anthropic's original implementation.</p> </li> </ul>"},{"location":"#status","title":"Status","text":"<p><code>freeact-skills</code> is in early development. Skill interfaces and implementations may change frequently, relying on the adaptability of <code>freeact</code> agents to handle such changes gracefully.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#ipybox-installation","title":"ipybox installation","text":"<p>For use with <code>freeact</code> agents, <code>freeact-skills</code> needs to be pre-installed on ipybox Docker images. First, install <code>ipybox</code>:</p> <pre><code>pip install ipybox\n</code></pre> <p>Create a <code>dependencies.txt</code> file with one of the following configurations:</p> dependencies.txt<pre><code># Install all available skills\nfreeact-skills = {version = \"*\", extras = [\"all\"]}\n</code></pre> <p>The <code>extras=[\"all\"]</code> option includes all available skills: <code>[\"reader\", \"search-google\", \"search-perplexity\", \"zotero\"]</code>. Alternatively, you can install specific skills:</p> dependencies.txt<pre><code># Install selected skills only\nfreeact-skills = {version = \"*\", extras = [\"search-google\", \"zotero\"]}\n</code></pre> <p>Note</p> <p><code>dependencies.txt</code> must follow the Poetry dependency specification format.</p> <p>Build the <code>ipybox</code> Docker image with your selected skills:</p> <pre><code>python -m ipybox build -t your-image-tag -d dependencies.txt\n</code></pre> <p>Replace <code>your-image-tag</code> with your preferred image name.</p>"},{"location":"installation/#local-installation","title":"Local installation","text":"<p>For local development or direct usage, install with <code>pip</code>:</p> <pre><code>pip install freeact-skills[all]\n</code></pre> <p>This is equivalent to:</p> <pre><code>pip install freeact-skills[reader,search-google,search-perplexity,zotero]\n</code></pre> <p>To install specific skills only:</p> <pre><code>pip install freeact-skills[search-google,zotero]\n</code></pre>"}]}